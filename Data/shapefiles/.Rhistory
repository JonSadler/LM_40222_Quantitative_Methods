# Writes the data to a csv named "practical_data" in your file directory
write.csv(Census.Data, "/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/Birmingham Census 2021 MSOA/practical_data.csv", row.names=F)
setwd("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods")
getwd()
list.files()
BhamData <- read_csv("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/Birmingham Census 2021 MSOA/practical_data.csv") # notice the use of quotes.
glimpse((BhamData))
glimpse((BhamData))
summary(BhamData)
summary(BhamData)
ggsave(
filename = "/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Images/Outputs/BhamPlot.png",
plot = BhamPlot,  # This is the name we gave the plot. Remember to remove the quotes around BhamPlot
width = 965,
height = 650,
dpi = 150,
units = "px")
BhamPlot <- ggplot(data = BhamData, mapping = aes(x = Unemployed, y = Qualification)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm", color = "grey") +
labs(
title = "Educational attainment and unemployment levels in Birmingham (LSOAs)",
subtitle = "Links to ethnicity",
x = "Education attainment (% level 4 or above)", y = "Levels of Unemployment (%)",
color = "White British (%)", size = "White British (%)")
library("tidyverse") # don't forget to use the quote marks!
BhamData <- read_csv("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/Birmingham Census 2021 MSOA/practical_data.csv") # notice the use of quotes.
glimpse((BhamData))
summary(BhamData)
ggplot(data = BhamData) # when run it we get a grey box in plot window (bottom left)
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed))
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed)) + geom_point()
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed, colour = White_British)) + geom_point()
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed, colour = White_British)) +
geom_point() +
scale_colour_gradient(low = "lightblue", high = "darkblue")
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue")
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm")
ggplot(data = BhamData, mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm", color = "darkgrey")
ggplot(data = BhamData, mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm", color = "grey") +
labs(
title = "Educational attainment and unemployment levels in Birmingham (LSOAs)",
subtitle = "Links to ethnicity",
x = "Education attainment (% level 4 or above)", y = "Levels of Unemployment (%)",
color = "White British (%)", size = "White British (%)")
BhamPlot <- ggplot(data = BhamData, mapping = aes(x = Unemployed, y = Qualification)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm", color = "grey") +
labs(
title = "Educational attainment and unemployment levels in Birmingham (LSOAs)",
subtitle = "Links to ethnicity",
x = "Education attainment (% level 4 or above)", y = "Levels of Unemployment (%)",
color = "White British (%)", size = "White British (%)")
ggsave(
filename = "/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Outputs/BhamPlot.png",
plot = BhamPlot,  # This is the name we gave the plot. Remember to remove the quotes around BhamPlot
width = 965,
height = 650,
dpi = 150,
units = "px")
ggplot(BhamData, aes(x = Qualification)) +
geom_histogram(binwidth = 10)
ggplot(BhamData, aes(x = Qualification)) +
geom_histogram(binwidth = 1)
ggplot(BhamData, aes(x = Qualification)) +
geom_histogram(binwidth = 5)
ggplot(BhamData, aes(x = Qualification)) +
geom_density()
ggplot(BhamData, aes(sample=Qualification)) +
stat_qq() +
stat_qq_line()
#make this example reproducible
set.seed(1)
#create some fake data that follows a normal distribution for 200 datapoints
df <- data.frame(col=rnorm(200))
#create Q-Q plot
ggplot(df, aes(sample=col)) +
stat_qq() +
stat_qq_line()
ggplot(BhamData, aes(x = 1, y = Qualification)) +
geom_boxplot() +
scale_x_continuous(breaks = NULL) # we need this new code otherwise R will add a 'fake' x axis!
BhamPlot <- ggplot(data = BhamData, mapping = aes(x = Unemployed, y = Qualification)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm", color = "grey") +
labs(
title = "Educational attainment and unemployment levels in Birmingham (LSOAs)",
subtitle = "Links to ethnicity",
x = "Education attainment (% level 4 or above)", y = "Levels of Unemployment (%)",
color = "White British (%)", size = "White British (%)")
ggsave(
filename = "/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Outputs/BhamPlot.png",
plot = BhamPlot,  # This is the name we gave the plot. Remember to remove the quotes around BhamPlot
width = 965,
height = 650,
dpi = 150,
units = "px")
ggsave(
filename = "/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Outputs/BhamPlot.png",
plot = BhamPlot,  # This is the name we gave the plot. Remember to remove the quotes around BhamPlot
width = 965,
height = 650,
dpi = 150,
units = "px")
getwd()
get()
getwd()
setwd("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Codefiles)
setwd("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Codefiles")
# List of required libraries
required_libraries <- c("sf","terra", "spdep","mapsf")
# Check for the libraries that are not already installed
libraries_to_install <- required_libraries[!(required_libraries %in% installed.packages()[,"Package"])]
# Install missing libraries
if(length(libraries_to_install)) {
install.packages(libraries_to_install, dependencies = TRUE)
}
# Load all the required libraries
invisible(lapply(required_libraries, library, character.only = TRUE))
# List of required libraries
required_libraries <- c("sf","terra", "spdep","mapsf")
# Check for the libraries that are not already installed
libraries_to_install <- required_libraries[!(required_libraries %in% installed.packages()[,"Package"])]
# Install missing libraries
if(length(libraries_to_install)) {
install.packages(libraries_to_install, dependencies = TRUE)
}
# Load all the required libraries
lapply(required_libraries, library, character.only = TRUE)
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed))
library("tidyverse") # don't forget to use the quote marks!
BhamData <- read_csv("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/Birmingham Census 2021 MSOA/practical_data.csv") # notice the use of quotes.
glimpse(BhamData)
summary(BhamData)
ggplot(data = BhamData) # when run it we get a grey box in plot window (bottom left)
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed))
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed)) + geom_point()
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed, colour = White_British)) + geom_point()
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed, colour = White_British)) +
geom_point() +
scale_colour_gradient(low = "lightblue", high = "darkblue")
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue")
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm")
ggplot(data = BhamData, mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm", color = "darkgrey")
ggplot(data = BhamData, mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm", color = "grey") +
labs(
title = "Educational attainment and unemployment levels in Birmingham (LSOAs)",
subtitle = "Links to ethnicity",
x = "Education attainment (% level 4 or above)", y = "Levels of Unemployment (%)",
color = "White British (%)", size = "White British (%)")
BhamPlot <- ggplot(data = BhamData, mapping = aes(x = Unemployed, y = Qualification)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm", color = "grey") +
labs(
title = "Educational attainment and unemployment levels in Birmingham (LSOAs)",
subtitle = "Links to ethnicity",
x = "Education attainment (% level 4 or above)", y = "Levels of Unemployment (%)",
color = "White British (%)", size = "White British (%)")
ggsave(
filename = "/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Outputs/BhamPlot.png",
plot = BhamPlot,  # This is the name we gave the plot. Remember to remove the quotes around BhamPlot
width = 965,
height = 650,
dpi = 150,
units = "px")
ggplot(BhamData, aes(x = Qualification)) +
geom_histogram(binwidth = 10)
ggplot(BhamData, aes(x = Qualification)) +
geom_histogram(binwidth = 1)
ggplot(BhamData, aes(x = Qualification)) +
geom_histogram(binwidth = 5)
ggplot(BhamData, aes(x = Qualification)) +
geom_density()
ggplot(BhamData, aes(sample=Qualification)) +
stat_qq() +
stat_qq_line()
#make this example reproducible
set.seed(1)
#create some fake data that follows a normal distribution for 200 datapoints
df <- data.frame(col=rnorm(200))
#create Q-Q plot
ggplot(df, aes(sample=col)) +
stat_qq() +
stat_qq_line()
ggplot(BhamData, aes(x = 1, y = Qualification)) +
geom_boxplot() +
scale_x_continuous(breaks = NULL) # we need this new code otherwise R will add a 'fake' x axis!
ggplot(Gap2007, aes(x=gdpPercap, y=lifeExp)) +
geom_point(aes(size=pop_by_mil, colour=continent)) +
labs(title = "Global GDP and life expectancy pattern",
subtitle = "2007",
x = "Gross domestic product (US $)", y = "Life expectency (years)",
color = "Continent", size = "Population size (millions)")
# install.packages("gapminder") - I have made this a comment as it's already installed on my system.
library(gapminder)
glimpse(gapminder)
Gap2007 <- gapminder %>%
filter(year == 2007)
Gap2007 <- Gap2007 %>%
dplyr::mutate(pop_by_mil = pop / 1000000) # mutate is from dplyr
library("tidyverse") # don't forget to use the quote marks!
BhamData <- read_csv("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/Birmingham Census 2021 MSOA/practical_data.csv") # notice the use of quotes.
glimpse(BhamData)
summary(BhamData)
ggplot(data = BhamData) # when run it we get a grey box in plot window (bottom left)
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed))
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed)) + geom_point()
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed, colour = White_British)) + geom_point()
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed, colour = White_British)) +
geom_point() +
scale_colour_gradient(low = "lightblue", high = "darkblue")
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue")
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm")
ggplot(data = BhamData, mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm", color = "darkgrey")
ggplot(data = BhamData, mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm", color = "grey") +
labs(
title = "Educational attainment and unemployment levels in Birmingham (LSOAs)",
subtitle = "Links to ethnicity",
x = "Education attainment (% level 4 or above)", y = "Levels of Unemployment (%)",
color = "White British (%)", size = "White British (%)")
BhamPlot <- ggplot(data = BhamData, mapping = aes(x = Unemployed, y = Qualification)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm", color = "grey") +
labs(
title = "Educational attainment and unemployment levels in Birmingham (LSOAs)",
subtitle = "Links to ethnicity",
x = "Education attainment (% level 4 or above)", y = "Levels of Unemployment (%)",
color = "White British (%)", size = "White British (%)")
ggsave(
filename = "/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Outputs/BhamPlot.png",
plot = BhamPlot,  # This is the name we gave the plot. Remember to remove the quotes around BhamPlot
width = 965,
height = 650,
dpi = 150,
units = "px")
ggplot(BhamData, aes(x = Qualification)) +
geom_histogram(binwidth = 10)
ggplot(BhamData, aes(x = Qualification)) +
geom_histogram(binwidth = 1)
ggplot(BhamData, aes(x = Qualification)) +
geom_histogram(binwidth = 5)
ggplot(BhamData, aes(x = Qualification)) +
geom_density()
ggplot(BhamData, aes(sample=Qualification)) +
stat_qq() +
stat_qq_line()
#make this example reproducible
set.seed(1)
#create some fake data that follows a normal distribution for 200 datapoints
df <- data.frame(col=rnorm(200))
#create Q-Q plot
ggplot(df, aes(sample=col)) +
stat_qq() +
stat_qq_line()
ggplot(BhamData, aes(x = 1, y = Qualification)) +
geom_boxplot() +
scale_x_continuous(breaks = NULL) # we need this new code otherwise R will add a 'fake' x axis!
ggplot(Gap2007, aes(x=gdpPercap, y=lifeExp)) +
geom_point(aes(size=pop_by_mil, colour=continent)) +
labs(title = "Global GDP and life expectancy pattern",
subtitle = "2007",
x = "Gross domestic product (US $)", y = "Life expectency (years)",
color = "Continent", size = "Population size (millions)")
# install.packages("gapminder") - I have made this a comment as it's already installed on my system.
library(gapminder)
glimpse(gapminder)
Gap2007 <- gapminder %>%
filter(year == 2007)
Gap2007 <- Gap2007 %>%
dplyr::mutate(pop_by_mil = pop / 1000000) # mutate is from dplyr
# List of required libraries
required_libraries <- c("sf","terra", "spdep","mapsf","maps","viridis","tmap")
# Check for the libraries that are not already installed
libraries_to_install <- required_libraries[!(required_libraries %in% installed.packages()[,"Package"])]
# Install missing libraries
if(length(libraries_to_install)) {
install.packages(libraries_to_install, dependencies = TRUE)
}
# Load all the required libraries
lapply(required_libraries, library, character.only = TRUE)
library("tidyverse") # don't forget to use the quote marks!
getwd()
setwd("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods")
getwd()
# loads a csv, remember to correctly input the file location within your working directory or point to the directory where you data are stored.
Ethnicity <- read_csv("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/Birmingham Census 2021 MSOA/Bham_C2021_TS021Ethnic group.csv")
Rooms <- read_csv("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/Birmingham Census 2021 MSOA/Bham_C2021_TS053Occupancy.csv")
Qualifications <-read_csv("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/Birmingham Census 2021 MSOA/Bham_C2021_TS067Qualifications.csv")
Employment <-read_csv("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/Birmingham Census 2021 MSOA/Bham_C2021_TS066Economic.csv")
unlink("LM40222_Week_2_cache", recursive = TRUE)
Gap2007 <- gapminder %>%
dplyr::filter(year == 2007) # filter function is from dplyr
Gap2007 <- gapminder %>%
dplyr::filter(year == 2007) # filter function is from dplyr
View(Employment)
gewtwd()
getwd()
bham_data <- read_csv("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Birmingham Census 2021 MSOA/practical_data.csv")
library(tidyverse)
bham_data <- read_csv("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Birmingham Census 2021 MSOA/practical_data.csv")
setwd("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/Birmingham Census 2021 MSOA")
bham_data <- read_csv(setwd("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/Birmingham Census 2021 MSOA/practical_data.csv")
bham_data <- read_csv("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/Birmingham Census 2021 MSOA/practical_data.csv")
View(bham_data)
# loads a csv, remember to correctly input the file location within your working directory or point to the directory where you data are stored.
Ethnicity <- read_csv("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/Birmingham Census 2021 MSOA/Bham_C2021_TS021Ethnic group.csv")
Rooms <- read_csv("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/Birmingham Census 2021 MSOA/Bham_C2021_TS053Occupancy.csv")
Qualifications <-read_csv("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/Birmingham Census 2021 MSOA/Bham_C2021_TS067Qualifications.csv")
Employment <-read_csv("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/Birmingham Census 2021 MSOA/Bham_C2021_TS066Economic.csv")
bham_data <- read_csv("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/Birmingham Census 2021 MSOA/practical_data.csv")
setwd("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles")
# List of required libraries
required_libraries <- c("sf","terra", "spdep","mapsf","maps","viridis","tmap","spData","spDataLarge","tidyverse")
# Check for the libraries that are not already installed
libraries_to_install <- required_libraries[!(required_libraries %in% installed.packages()[,"Package"])]
# Install missing libraries
if(length(libraries_to_install)) {
install.packages(libraries_to_install, dependencies = TRUE)
}
# Load all the required libraries
lapply(required_libraries, library, character.only = TRUE)
install.packages("sf", dependencies = TRUE)
install.packages("terra", dependencies = TRUE)
install.packages("spdep", dependencies = TRUE)
install.packages("mapsf", dependencies = TRUE)
install.packages("maps", dependencies = TRUE)
install.packages("viridis", dependencies = TRUE)
install.packages("tmap",dependencies = TRUE)
install.packages("spData", dependencies = TRUE)
# we need to install spDataLarge directly from the source using a different command
install.packages("spDataLarge", repos = "https://nowosad.r-universe.dev")
install.packages("spdep", dependencies = TRUE)
install.packages("mapsf", dependencies = TRUE)
install.packages("maps", dependencies = TRUE)
install.packages("viridis", dependencies = TRUE)
install.packages("terra", dependencies = TRUE)
install.packages("tmap", dependencies = TRUE)
install.packages("spData", dependencies = TRUE)
install.packages("sf", dependencies = TRUE)
install.packages("terra", dependencies = TRUE)
install.packages("tmap", dependencies = TRUE)
install.packages("viridis", dependencies = TRUE)
install.packages("spData", dependencies = TRUE)
install.packages("sf", dependencies = TRUE)
install.packages("maps", dependencies = TRUE)
install.packages("spData", dependencies = TRUE)
install.packages("maps", dependencies = TRUE)
install.packages("sf", dependencies = TRUE)
install.packages("maps", dependencies = TRUE)
install.packages("sf", dependencies = TRUE)
install.packages("viridis", dependencies = TRUE)
install.packages("sf", dependencies = TRUE)
required_libraries <- c("sf","terra", "spdep","mapsf","maps","viridis","tmap","spData","spDataLarge","tidyverse")
# Load all the required libraries
lapply(required_libraries, library, character.only = TRUE)
Bham_data <- read_csv("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/Birmingham Census 2021 MSOA/practical_data.csv")
Bham_LSOA <- ("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/E08000025.shp")
Bham_LSOA <- readOGR("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/E08000025.shp")
library(sp)
bham_data <- read_csv("add in your directory path") # link this to the directly where your data are sat
Bham_data <- read_csv("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/Birmingham Census 2021 MSOA/practical_data.csv")
Bham_LSOA <- readOGR("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/E08000025.shp")
Bham_LSOA <- st_read("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/E08000025.shp")
View(Bham_LSOA)
plot(Bham_LSOA)
View(Bham_LSOA)
View(Bham_LSOA[[3]][[1]])
ham_LSOA <- readOGR("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/E08000025.shp")
ham_LSOA <- readOGR("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/E08000025")
install.packages("rgdal", dependencies = TRUE)
ham_LSOA <- readOGR("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/E08000025.shp")
Bham_LSOA <- st_read("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/E08000025.shp")
Bham_LSOA <- st_read(dsn ="~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/E08000025.shp")
Bham_LSOA <- sf::st_read(dsn ="~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/E08000025.shp")
tm_shape(Bham_LSOA) + tm_fill() + tm_borders()
Bham_LSOA <- sf::st_read("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/E08000025.shp") #using sf package
tm_shape(Bham_LSOA) + tm_fill() + tm_borders()
tm_shape(boston) + tm_fill() + tm_borders()
tm_shape(Bham_LSOA) + tm_fill() + tm_borders()
qtm(Bham_LSOA)
qtm(Bham_LSOA)
qtm(Bham_LSOA)
plot(Bham_LSOA)
str(Bham_data)
str(Bham_LSOA)
View(Bham_LSOA)
View(Bham_LSOA[[3]][[14]])
Bham_LSOA <- sf::st_read("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/E08000025.shp") # using the sf package
Bham_LSOA
glimpse(Bham_LSOA)
st_read(birmingham_lsao.geo,json)
getwd()
st_read(birmingham_lsoa.geo,json)
st_read(birmingham_lsoa.geo.json)
list.files("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles")
test <- st_read("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/birmingham_lsoa.geo.json")
View(test)
plot(test)
names(test)
test <- st_read("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/birmingham_lsoa.geo.json")
test <- test[,!names(test) %in% c("id", "LSOA11NM")]
View(test)
plot(test)
#preprocessing text to simplify the shapefile. The geo.JSON had additonal fields that I don't want to cause confusion.
test <- st_read("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/birmingham_lsoa.geo.json")
test <- test[,!names(test) %in% c("id", "LSOA11NM")]
st_write("Test.shp")
View(test)
test
View(Bham_data)
View(Bham_data)
bham_LSOA_census <- merge(Output.Areas, Census.Data, by.x="Code", by.y="LSOA11CD")
bham_LSOA_census <- merge(Bham_data, test, by.x="Code", by.y="LSOA11CD")
View(bham_LSOA_census)
qtm(bham_LSOA_census, fill = "Qualification")
#preprocessing text to simplify the shapefile. The geo.JSON had additonal fields that I don't want to cause confusion.
test <- st_read("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/birmingham_lsoa.geo.json")
test <- test[,!names(test) %in% c("id", "LSOA11NM")]
st_write("Test.shp")
str(test)
#preprocessing text to simplify the shapefile. The geo.JSON had additonal fields that I don't want to cause confusion.
test <- st_read("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/birmingham_lsoa.geo.json")
#test <- test[,!names(test) %in% c("id", "LSOA11NM")]
st_write("Test.shp")
#preprocessing text to simplify the shapefile. The geo.JSON had additonal fields that I don't want to cause confusion.
test <- st_read("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/birmingham_lsoa.geo.json")
#test <- test[,!names(test) %in% c("id", "LSOA11NM")]
st_write("Test.shp")
bham_LSOA_census <- merge(Bham_data, test, by.x="Code", by.y="LSOA11CD")
qtm(bham_LSOA_census, fill = "Qualification")
Bham_LSOA <- sf::st_read("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/E08000025.shp") # using the sf package
tm_shape(Bham_LSOA) + tm_fill() + tm_borders()
glimpse(Bham_LSOA)
bham_LSOA_census <- merge(Bham_data, test, by.x="Code", by.y="LSOA11CD")
qtm(bham_LSOA_census, fill = "Qualification")
bham_LSOA_census
