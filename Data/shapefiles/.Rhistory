plot = BhamPlot,  # Remove the quotes around BhamPlot
width = 12,
height = 10,
dpi = 300,
units = "cm"
)
ggsave(
filename = "/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Codefiles/Week 2/BhamPlot.jpg",
plot = BhamPlot,  # Remove the quotes around BhamPlot
width = 10,
height = 8,
dpi = 300,
units = "cm"
)
ggsave(
filename = "/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Codefiles/Week 2/BhamPlot.jpg",
plot = BhamPlot,  # Remove the quotes around BhamPlot
width = 1000,
height = 675,
dpi = 300,
units = "px"
)
View(BhamPlot)
BhamPlot <- ggplot(data = BhamData, mapping = aes(x = Unemployed, y = Qualification)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "red", high = "darkred") +
geom_smooth(method = "lm", color = "red") +
labs(
title = "Educational attainment and unemployment levels in Birmingham",
subtitle = "Links to ethnicity",
x = "Levels of Unemployment (%)", y = "Education attainment (% level 4 or above)",
color = "White British (%)", size = "White British (%)"
)
ggsave(
filename = "/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Codefiles/Week 2/BhamPlot.jpg",
plot = BhamPlot,  # Remove the quotes around BhamPlot
width = 1000,
height = 675,
dpi = 300,
units = "px"
)
BhamPlot
ggsave(
filename = "/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Codefiles/Week 2/BhamPlot.jpg",
plot = BhamPlot,  # Remove the quotes around BhamPlot
width = 600,
height = 544,
dpi = 150,
units = "px"
)
ggsave(
filename = "/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Codefiles/Week 2/BhamPlot.jpg",
plot = BhamPlot,  # Remove the quotes around BhamPlot
width = 700,
height = 544,
dpi = 150,
units = "px"
)
ggsave(
filename = "/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Codefiles/Week 2/BhamPlot.jpg",
plot = BhamPlot,  # Remove the quotes around BhamPlot
width = 700,
height = 544,
dpi = 300,
units = "px"
)
ggsave(
filename = "/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Codefiles/Week 2/BhamPlot.png",
plot = BhamPlot,  # Remove the quotes around BhamPlot
width = 700,
height = 544,
dpi = 300,
units = "px"
)
ggsave(
filename = "/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Codefiles/Week 2/BhamPlot.png",
plot = BhamPlot,  # Remove the quotes around BhamPlot
width = 700,
height = 544,
dpi = 100,
units = "px"
)
ggsave(
filename = "/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Codefiles/Week 2/BhamPlot.png",
plot = BhamPlot,  # Remove the quotes around BhamPlot
width = 700,
height = 544,
dpi = 120,
units = "px"
)
ggsave(
filename = "/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Codefiles/Week 2/BhamPlot.png",
plot = BhamPlot,  # Remove the quotes around BhamPlot
width = 700,
height = 544,
dpi = 150,
units = "px"
)
ggsave(
filename = "/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Codefiles/Week 2/BhamPlot.png",
plot = BhamPlot,  # Remove the quotes around BhamPlot
width = 700,
height = 544,
dpi = 150,
units = "px"
)
ggsave(
filename = "/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Codefiles/Week 2/BhamPlot.png",
plot = BhamPlot,  # Remove the quotes around BhamPlot
width = 800,
height = 544,
dpi = 150,
units = "px"
)
ggsave(
filename = "/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Codefiles/Week 2/BhamPlot.png",
plot = BhamPlot,  # Remove the quotes around BhamPlot
width = 900,
height = 544,
dpi = 150,
units = "px"
)
ggsave(
filename = "/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Codefiles/Week 2/BhamPlot.png",
plot = BhamPlot,  # Remove the quotes around BhamPlot
width = 900,
height = 650,
dpi = 150,
units = "px"
)
library("tidyverse") # don't forget to use the quote marks!
BhamData <- read_csv("/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Data/Birmingham Census 2021 MSOA/practical_data.csv") # notice the use of quotes.
glimpse((BhamData))
summary(BhamData)
ggplot(data = BhamData) # when run it we get a grey box in plot window (bottom left)
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed))
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed)) + geom_point()
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed, colour = White_British)) + geom_point()
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed, colour = White_British)) +
geom_point() +
scale_colour_gradient(low = "lightblue", high = "darkblue")
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue")
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm")
ggplot(data = BhamData, mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm", color = "darkgrey")
ggplot(data = BhamData, mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm", color = "grey") +
labs(
title = "Educational attainment and unemployment levels in Birmingham (LSOAs)",
subtitle = "Links to ethnicity",
x = "Education attainment (% level 4 or above)", y = "Levels of Unemployment (%)",
color = "White British (%)", size = "White British (%)")
BhamPlot <- ggplot(data = BhamData, mapping = aes(x = Unemployed, y = Qualification)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm", color = "grey") +
labs(
title = "Educational attainment and unemployment levels in Birmingham (LSOAs)",
subtitle = "Links to ethnicity",
x = "Education attainment (% level 4 or above)", y = "Levels of Unemployment (%)",
color = "White British (%)", size = "White British (%)")
ggsave(
filename = "/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Outputs/BhamPlot.png",
plot = BhamPlot,  # This is the name we gave the plot. Remember to remove the quotes around BhamPlot
width = 965,
height = 650,
dpi = 150,
units = "px")
ggplot(BhamData, aes(x = Qualification)) +
geom_histogram(binwidth = 10)
ggplot(BhamData, aes(x = Qualification)) +
geom_histogram(binwidth = 1)
ggplot(BhamData, aes(x = Qualification)) +
geom_histogram(binwidth = 5)
ggplot(BhamData, aes(x = Qualification)) +
geom_density()
ggplot(BhamData, aes(sample=Qualification)) +
stat_qq() +
stat_qq_line()
#make this example reproducible
set.seed(1)
#create some fake data that follows a normal distribution for 200 datapoints
df <- data.frame(col=rnorm(200))
#create Q-Q plot
ggplot(df, aes(sample=col)) +
stat_qq() +
stat_qq_line()
ggplot(BhamData, aes(x = 1, y = Qualification)) +
geom_boxplot() +
scale_x_continuous(breaks = NULL) # we need this new code otherwise R will add a 'fake' x axis!
Gap2007 <- gapminder %>%
filter(year == 2007)
install.packages("gapminder")
install.packages("gapminder")
# install.packages("gapminder")
library(gapminder)
Gap2007 <- gapminder %>%
filter(year == 2007)
ggplot(Gap2007, aes(x=gdpPercap, y=lifeExp)) +
geom_point(aes(size=pop, colour=continent)) +
labs(title = "Global GDP and life expectancy pattern for 2007",
x = "Gross domestic product (US $)", y = "Life expectency (years)",
color = "Continent", size = "Population size")
Gap2007 <- gapminder %>%
filter(year == 2007)
ggplot(Gap2007, aes(x=gdpPercap, y=lifeExp)) +
geom_point(aes(size=pop, colour=continent)) +
labs(title = "Global GDP and life expectancy pattern for 2007",
x = "Gross domestic product (US $)", y = "Life expectency (years)",
color = "Continent", size = "Population size")
ggplot(Gap2007, aes(x=gdpPercap, y=lifeExp)) +
geom_point(aes(size=pop, colour=continent)) +
labs(title = "Global GDP and life expectancy pattern",
x = "Gross domestic product (US $)", y = "Life expectency (years)",
color = "Continent", size = "Population size")
ggplot(Gap2007, aes(x=gdpPercap, y=lifeExp)) +
geom_point(aes(size=pop, colour=continent)) +
labs(title = "Global GDP and life expectancy pattern",
subtitle = "2007",
x = "Gross domestic product (US $)", y = "Life expectency (years)",
color = "Continent", size = "Population size")
min(gapminder$year)
library("tidyverse") # don't forget to use the quote marks!
BhamData <- read_csv("/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Data/Birmingham Census 2021 MSOA/practical_data.csv") # notice the use of quotes.
glimpse((BhamData))
summary(BhamData)
ggplot(data = BhamData) # when run it we get a grey box in plot window (bottom left)
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed))
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed)) + geom_point()
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed, colour = White_British)) + geom_point()
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed, colour = White_British)) +
geom_point() +
scale_colour_gradient(low = "lightblue", high = "darkblue")
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue")
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm")
ggplot(data = BhamData, mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm", color = "darkgrey")
ggplot(data = BhamData, mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm", color = "grey") +
labs(
title = "Educational attainment and unemployment levels in Birmingham (LSOAs)",
subtitle = "Links to ethnicity",
x = "Education attainment (% level 4 or above)", y = "Levels of Unemployment (%)",
color = "White British (%)", size = "White British (%)")
BhamPlot <- ggplot(data = BhamData, mapping = aes(x = Unemployed, y = Qualification)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm", color = "grey") +
labs(
title = "Educational attainment and unemployment levels in Birmingham (LSOAs)",
subtitle = "Links to ethnicity",
x = "Education attainment (% level 4 or above)", y = "Levels of Unemployment (%)",
color = "White British (%)", size = "White British (%)")
ggsave(
filename = "/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Outputs/BhamPlot.png",
plot = BhamPlot,  # This is the name we gave the plot. Remember to remove the quotes around BhamPlot
width = 965,
height = 650,
dpi = 150,
units = "px")
ggplot(BhamData, aes(x = Qualification)) +
geom_histogram(binwidth = 10)
ggplot(BhamData, aes(x = Qualification)) +
geom_histogram(binwidth = 1)
ggplot(BhamData, aes(x = Qualification)) +
geom_histogram(binwidth = 5)
ggplot(BhamData, aes(x = Qualification)) +
geom_density()
ggplot(BhamData, aes(sample=Qualification)) +
stat_qq() +
stat_qq_line()
#make this example reproducible
set.seed(1)
#create some fake data that follows a normal distribution for 200 datapoints
df <- data.frame(col=rnorm(200))
#create Q-Q plot
ggplot(df, aes(sample=col)) +
stat_qq() +
stat_qq_line()
ggplot(BhamData, aes(x = 1, y = Qualification)) +
geom_boxplot() +
scale_x_continuous(breaks = NULL) # we need this new code otherwise R will add a 'fake' x axis!
ggplot(Gap2007, aes(x=gdpPercap, y=lifeExp)) +
geom_point(aes(size=pop, colour=continent)) +
labs(title = "Global GDP and life expectancy pattern",
subtitle = "2007",
x = "Gross domestic product (US $)", y = "Life expectency (years)",
color = "Continent", size = "Population size")
# install.packages("gapminder")
library(gapminder)
glimpse(gapminder)
Gap2007 <- gapminder %>%
filter(year == 2007)
Gap2007 <- gapminder %>%
filter(year == 2007)
View(Gap2007)
inserttable:::insert_table()
We include an external image with the R function:
knitr::include_graphics("/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Images/gapminder_table.png")
knitr::include_graphics("/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Images/gapminder_table.png")
knitr::include_graphics("/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Images/gapminder_table.png")
knitr::include_graphics("/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Images/gapminder_table.png")
knitr::include_graphics("/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Images/gapminder_table.png")
knitr::include_graphics("/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Images/gapminder_table.png")
knitr::include_graphics("/Users/jonsadler/Library/CloudStorage/OneDrive-UniversityofBirmingham/Teaching-materials/COURSES/4TH_YR/LM 40222 Quantitative methods/Images/gapminder_table.png")
glimpse(gapminder)
glimpse(gapminder)
# to view the top 1000 cases of a data frame
View(Qualifications)
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed, colour = White_British)) + geom_point()
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed, colour = White_British)) +
geom_point() +
scale_colour_gradient(low = "lightblue", high = "darkblue")
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue")
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm")
ggplot(
data = BhamData,
mapping = aes(x = Qualification, y = Unemployed)) +
geom_point(aes(size = White_British, colour = White_British)) +
scale_colour_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "lm")
Gap2007 <- gapminder %>%
filter(year = 2007)
Gap2007 <- gapminder %>%
filter(year == 2007)
Bham_LSOA <- sf::st_read("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/E08000025.shp") # using the sf package
tm_shape(Bham_LSOA) + tm_fill() + tm_borders()
required_libraries <- c("sf","terra", "spdep","mapsf","maps","viridis","tmap","spData","spDataLarge","tidyverse")
# Load all the required libraries
lapply(required_libraries, library, character.only = TRUE)
# character.only = TRUE makes sure the names used are case sensitive.
View(Bham_LSOA)
class(Bham_LSOA)
tm_shape(Bham_LSOA) + tm_fill() + tm_borders()
str(Bham_data)
bham_data <- read_csv("add in your directory path") # link this to the directly where your data are sat
Bham_data <- read_csv("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/Birmingham Census 2021 MSOA/practical_data.csv")
str(Bham_data)
bham_LSOA_census <- merge(Bham_data, test, by.x="Code", by.y="LSOA11CD")
bham_LSOA_census <- merge(Bham_data, Bham_LSOA, by.x="Code", by.y="LSOA11CD")
#preprocessing text to simplify the shapefile. The geo.JSON had additonal fields that I don't want to cause confusion.
test <- st_read("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/birmingham_lsoa.geo.json")
#test <- test[,!names(test) %in% c("id", "LSOA11NM")]
st_write("Test.shp")
#preprocessing text to simplify the shapefile. The geo.JSON had additonal fields that I don't want to cause confusion.
test <- st_read("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/birmingham_lsoa.geo.json")
#test <- test[,!names(test) %in% c("id", "LSOA11NM")]
class(=test)
class(test)
#preprocessing text to simplify the shapefile. The geo.JSON had additonal fields that I don't want to cause confusion.
test <- st_read("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/birmingham_lsoa.geo.json")|> sf::st_sf()
#test <- test[,!names(test) %in% c("id", "LSOA11NM")]
class(test)
#preprocessing text to simplify the shapefile. The geo.JSON had additonal fields that I don't want to cause confusion.
test <- st_read("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/birmingham_lsoa.geo.json") |> sf::st_sf()
#test <- test[,!names(test) %in% c("id", "LSOA11NM")]
#preprocessing text to simplify the shapefile. The geo.JSON had additonal fields that I don't want to cause confusion.
test <- st_read("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/birmingham_lsoa.geo.json") %>% sf::st_sf()
#test <- test[,!names(test) %in% c("id", "LSOA11NM")]
#preprocessing text to simplify the shapefile. The geo.JSON had additonal fields that I don't want to cause confusion.
test <- st_read("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/birmingham_lsoa.geo.json")
#test <- test[,!names(test) %in% c("id", "LSOA11NM")]
test <- sf::st_sf(test)
class(test)
test <- sf::st_write(test, "test.shp")
getwd()
Bham_data <- read_csv("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/Birmingham Census 2021 MSOA/practical_data.csv")
setwd("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles")
Output.Areas<- readOGR(".", "Bham_LSOAs")
Output.Areas<- sf::st_read(".", "Bham_LSOAs")
plot(Output.Areas)
test <- sf::st_write(test, "test.shp")
list.file(".")
list.files(".")
test <- sf::st_write(test, "fred.shp")
LSOA <- sf::st_read("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/E08000025.shp") # using the sf package
tm_shape(LSOA) + tm_fill() + tm_borders()
glimpse(LSOA)
bham_LSOA_census <- merge(Bham_data, LSOA, by.x="Code", by.y="LSOA11CD")
bham_LSOA_census <- merge(Bham_data, LSOA, by.x="Code", by.y="LSOA11CD")
View(LSOA)
LSOA <- sf::st_read("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/E08000025.shp") # using the sf package
View(LSOA)
#preprocessing text to simplify the shapefile. The geo.JSON had additonal fields that I don't want to cause confusion.
LSOA <- st_read("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/birmingham_lsoa.geo.json")
#test <- test[,!names(test) %in% c("id", "LSOA11NM")]
View(LSOA)
bham_LSOA_census <- merge(Bham_data, LSOA, by.x="Code", by.y="LSOA11CD")
qtm(bham_LSOA_census, fill = "Qualification")
View(bham_LSOA_census)
glimpse(LSOA)
CRS(LSOA)
st_crs(LSOA)
# sets the coordinate system to the British National Grid
proj4string(LSOA) <- CRS("+init=EPSG:27700")
# sets the coordinate system to the British National Grid
proj4string(LSOA) <- CRS("+init=EPSG:27700")
# sets the coordinate system to the British National Grid
#proj4string(LSOA) <- CRS("+init=EPSG:27700")
st_crs(LSOA) <- 27700
# sets the coordinate system to the British National Grid
#proj4string(LSOA) <- CRS("+init=EPSG:27700")
st_transform(LSOA) <- 27700
# sets the coordinate system to the British National Grid
#proj4string(LSOA) <- CRS("+init=EPSG:27700")
st_transform(LSOA,27700)
st_crs(LSOA)
LSOA <- sf::st_read("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/E08000025.shp") # using the sf package
str(Bham_data)
st_crs(LSOA)
LSOA <- sf::st_read("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/E08000025.shp") # using the sf package
qtm(Bham_LSOA)
str(Bham_data)
st_crs(LSOA)
# sets the coordinate system to the British National Grid
#proj4string(LSOA) <- CRS("+init=EPSG:27700")
st_transform(LSOA,27700)
bham_LSOA_census <- merge(Bham_data, LSOA, by.x="Code", by.y="LSOA11CD")
#preprocessing text to simplify the shapefile. The geo.JSON had additonal fields that I don't want to cause confusion.
LSOA <- st_read("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/birmingham_lsoa.geo.json")
#test <- test[,!names(test) %in% c("id", "LSOA11NM")]
tm_shape(LSOA) + tm_fill() + tm_borders()
#preprocessing text to simplify the shapefile. The geo.JSON had additonal fields that I don't want to cause confusion.
LSOA <- st_read("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/birmingham_lsoa.geo.json")
#test <- test[,!names(test) %in% c("id", "LSOA11NM")]
View(LSOA)
#preprocessing text to simplify the shapefile. The geo.JSON had additonal fields that I don't want to cause confusion.
LSOA <- st_read("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/birmingham_lsoa.geo.json")
#test <- test[,!names(test) %in% c("id", "LSOA11NM")]
qtm(LSOA)
LSOA <- sf::st_read("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/E08000025.shp") # using the sf package
tm_shape(LSOA) + tm_fill() + tm_borders()
#preprocessing text to simplify the shapefile. The geo.JSON had additonal fields that I don't want to cause confusion.
LSOA <- sf::st_read("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/birmingham_lsoa.geo.json")
#test <- test[,!names(test) %in% c("id", "LSOA11NM")]
tm_shape(LSOA) + tm_fill() + tm_borders()
qtm(LSOA)
#preprocessing text to simplify the shapefile. The geo.JSON had additonal fields that I don't want to cause confusion.
LSOA <- sf::st_read("/Users/jonsadler/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/birmingham_lsoa.geo.json")
#test <- test[,!names(test) %in% c("id", "LSOA11NM")]
tm_shape(test) + tm_fill() + tm_borders()
LSOA <- sf::st_read("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/E08000025.shp") # using the sf package
tm_shape(test) + tm_fill() + tm_borders()
tm_shape(LSOA) + tm_fill() + tm_borders()
LSOA <- sf::st_read("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/fred.shp") # using the sf package
tm_shape(LSOA) + tm_fill() + tm_borders()
LSOA <- sf::st_read("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/fred.shp") # using the sf package
View(LSOA)
View(LSOA)
required_libraries <- c("sf","terra", "spdep","mapsf","maps","viridis","tmap","spData","spDataLarge","tidyverse")
# Load all the required libraries
lapply(required_libraries, library, character.only = TRUE)
# character.only = TRUE makes sure the names used are case sensitive.
Bham_data <- read_csv("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/Birmingham Census 2021 MSOA/practical_data.csv")
LSOA <- sf::st_read("~/Documents/GitHub/Teaching/LM_40222_Quantitative_Methods/Data/shapefiles/fred.shp") # using the sf package
tm_shape(LSOA) + tm_fill() + tm_borders()
View(LSOA)
